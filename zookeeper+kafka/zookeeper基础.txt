zookeeper 是什么
    开源的、分布式的
    为分布式应用提供协调服务的框架，主要来解决分布式集群中的应用系统的一致性问题。
    从设计模式角度：是一个基于观察者模式设计的分布式服务管理框架
    zookeeper = 文件系统 + 通知机制

zookeeper 特点
    一个leader，多个follower组成的集群
    集群中只要有半数以上的节点存活，zookeeper集群就能正常服务（一定要大于，不能大于等于）
    全局数据一致：每个server保存相同的数据副本，Client无论连接哪一个Server获取的数据都是一致的
    更新请求顺序执行，来自一个Client的请求按发送顺序依次执行
    数据更新具有原子性（事务特点）

数据结构
    数据模型结构类似于Unix文件系统的树形结构
    根目录是：/
    每个节点称作一个ZNode，每个ZNode能存储1M的数据
    每个ZNode可以通过其路径唯一标识

zookeeper 应用场景
    统一命名服务
        分布式环境需要对应用/服务进行统一命名方便识别（类似域名和IP地址的关系）
    统一配置管理
        分布式环境下，同步配置文件
            一般要求一个集群中所有节点的配置信息是一样的（比如kafka集群）
            对配置文件修改后希望快速同步到各个节点
        配置管理可以交给zookeeper实现
            配置信息写入到Zookeeper上的一个ZNode
            各个客户端服务器监听该ZNode
            一旦出现修改，zookeeper通知各个客户端服务器
    统一集群管理
        实时掌握每个节点的状态
            可根据节点实时状态做出调整
            zookeeper 将节点信息写入一个ZNode
            监听该节点可以获取状态的变化
    服务器节点动态上下线
        客户端能够实时发现服务器节点上下线
    软负载均衡
        在zookeeper中记录每台服务器的访问数，让访问数最少的服务器去处理最新的客户端请求

zookeeper 配置参数解读
    配置文件 zoo.cfg （来自zoo_sanmple.cfg的副本）
    tickTime=2000 ：通信心跳时长（单位毫秒，默认2000），zookeeper服务器与客户端的心跳时间
    initLimit=10 ：Leader和Follower初始通信时限（刚开始尝试建立连接可以容忍的心跳数，在当前配置下最多容忍10个心跳共计20s，如果超出20s依然通信失败则认为连接失败）
    syncLimit=5 ：leader与follower同步通信时限（当服务已经启动后，leader和follower之间通信可以容忍的最大心跳数）

zookeeper 内部原理
    选举机制（如何选出leader）
        半数机制：集群中半数以上节点存活，则集群可用（4个节点存活3个可用，存活两个则不可用），因此zookeeper适合安装奇数台服务器
        leader选举
            出现情况：服务器初始化启动，或者leader断开连接
            初始化启动时期：

节点类型
    持久节点
        客户端和服务器断开连接后，创建的节点不删除
        持久化目录节点
        持久化顺序编号目录节点
    瞬时节点
        客户端和服务器断开连接后，创建的节点自动删除（适用于服务节点上下限）
        临时目录节点
        临时顺序编号目录节点

myid的创建（在zkData）与分发

服务器节点的启动，状态的查看
客户端节点的启动

